/*Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

 

Example 1:


Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.
Example 2:


Input: root = [1,null,2,null,0,3]
Output: 3*/

class Solution {
    int m=0;
    public int maxAncestorDiff(TreeNode root) {
        
        if(root==null) return 0;
        dfs(root);
        return m;
    }
    
    int[] dfs(TreeNode root)
    {
        if(root==null) return null;
        int[] left=dfs(root.left);
        int[] right=dfs(root.right);
        if(left==null&&right==null) return new int[]{root.val,root.val};
        int min=root.val;
        int max=root.val;
        if(left!=null)
        {
            m=Math.max(m,Math.abs(left[0]-root.val));
            m=Math.max(m,Math.abs(left[1]-root.val));
            min=Math.min(min,left[0]);
            max=Math.max(max,left[1]);
        }
        if(right!=null)
        {
            m=Math.max(m,Math.abs(right[0]-root.val));
            m=Math.max(m,Math.abs(right[1]-root.val));
            min=Math.min(min,right[0]);
            max=Math.max(max,right[1]);
        }
        
        return new int[]{min,max};
    }
    
}