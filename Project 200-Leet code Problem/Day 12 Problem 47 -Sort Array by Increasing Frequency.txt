/*Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.

Return the sorted array.

 

Example 1:

Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.*/

class Solution{
    public int[] frequencySort(int[] nums) {
        Map<Integer,Integer> map=new HashMap<>();//map to store count of each number
        List<Integer> list=new ArrayList<>();
        for(int num:nums){
            if(map.containsKey(num))
                map.put(num,map.get(num)+1);
            else{
                list.add(num);
                map.put(num,1);
            }
        }
        Collections.sort(list,(a,b)->map.get(a)==map.get(b)?(b-a):map.get(a)-map.get(b));//sorting based on count value first and then number value
        int arr[]=new int[nums.length];
        int k=0;
        for(int num:list){
            int cnt=map.get(num);
            while(cnt>0){
                arr[k++]=num;
                cnt--;
            }
        }
        return arr;
    }
}